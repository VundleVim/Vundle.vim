*vundle.txt* Vundle the plug-in manager for Vim.     *vundle*

CONTENTS ~
                                                   *vundle-contents*
===========================================================================

1. About                                           |vundle-about|
2. Why Vundle                                      |vundle-why-vundle|
3. Quick start                                     |vundle-quickstart|
4. Scripts                                         |vundle-scripts|
   4.1. Configure scripts                          |vundle-scripts-configure|
   4.2. Installing scripts                         |vundle-scripts-install|
   4.3. Updating scripts                           |vundle-scripts-update|
   4.4. Searching scripts                          |vundle-scripts-search|
   4.5. Listing scripts                            |vundle-scripts-list|
   4.6. Cleanup                                    |vundle-scripts-cleanup|
5. Interactive mode                                |vundle-interactive|
6. Key mappings                                    |vundle-keymappings|
7. Options                                         |vundle-options|

===========================================================================

ABOUT                                              *vundle-about*

Vundle is a short cut for Vim bundle and is the Vim plug-in manager.

2. WHY VUNDLE ~
                                                   *vundle-why-vundle*
Vundle allows to:

- keep track and configure your scripts right in `.vimrc`
- install configured scripts (aka bundle) 
- update configured scripts
- search [all available vim scripts] by name
- clean up from unused scripts

Also *Vundle* :

- manages runtime path of your installed scripts
- regenerates helptags automatically

Vundle takes advantage of [vim-scripts.org](http://vim-scripts.org) 
in order to install/search [all available vim scripts]

3. QUICK START ~
                                                    *vundle-quickstart*
1) Setup Vundle: >

    git clone http://github.com/gmarik/vundle.git ~/.vim/vundle.git

2) Configure bundles:

   Sample `.vimrc`: >

     set nocompatible               " be iMproved
     filetype off                   " required!

     set rtp+=~/.vim/vundle.git/ 
     call vundle#rc()

     " let Vundle manage Vundle
     Bundle 'gmarik/vundle'

     " My Bundles here:
     "
     " original repos on github
     Bundle 'tpope/vim-fugitive'
     Bundle 'Lokaltog/vim-easymotion'
     Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
     " vim-scripts repos
     Bundle 'L9'
     Bundle 'FuzzyFinder'
     Bundle 'rails.vim'
     " non github repos
     Bundle 'git://git.wincent.com/command-t.git'
     " git repos on your local machine (ie. when working on your own plugin)
     Bundle 'file:///Users/gmarik/path/to/plugin'
     " ...

     filetype plugin indent on     " required!
     " or 
     " filetype plugin on          " to not use the indentation settings set by plugins

3) Install configured bundles:

   Launch `vim`, run >

    :BundleInstall

Installing requires [Git] and triggers [Git clone](http://gitref.org/creating/#clone) for 
each configured repo to `~/.vim/bundle/`.

4. SCRIPTS ~
                                                    *vundle-scripts*
4.1 CONFIGURE SCRIPTS ~
                                      *vundle-scripts-configure* *Bundle*
Before installing scripts they need to be configured. It's done using `Bundle`
command in `.vimrc`: >

    Bundle 'git_repo_uri'       " 'git_repo_uri' should be a valid uri to git repository 
or >
    Bundle 'script_name'        " 'script-name' should be an official script name (see |vundle-scripts-search| )

Vundle loves Github, that's why short uris can be used with commands: >

    Bundle 'tpope/vim-fugitive'

equals full uri >

    Bundle 'http://github.com/tpope/vim-fugitive.git'

NOTE: Vundle defaults to http:// protocol for the short URIs


4.2 INSTALL SCRIPTS ~
                                      *vundle-scripts-install* *BundleInstall*
run >
    :BundleInstall

installs configured scripts. Newly installed scripts will be automatically
enabled. Except special cases requiring compilation or pre-configuration.

BundleInstall allows to install scripts by name:>

    :BundleInstall unite.vim

installs and activates unite.vim. You can use Tab to auto-complete known script names.
NOTE: installation, as just described, doesn't automatically configure scripts; 
you have to configure them manually.

4.3 UPDATE SCRIPTS ~
                                      *vundle-scripts-update* *BundleInstall!*
run >
    :BundleInstall!             " NOTE: bang(!)

installs or updates configured scripts.
press u after updates complete to see the changelog of all updated bundles.

4.4 SEARCHING ~
                                       *vundle-scripts-search* *BundleSearch*
run >
    :BundleSearch foo

lists bundles matching 'foo' in new a new split window, ie:
>
    Bundle "VimFootnotes"
    Bundle "foo.vim"
>
and >

    :BundleSearch! foo

refreshes script list before performing actual search.

If command is run without argument: >

    :BundleSearch!

it will display all known scripts

Searching requires [`curl`](http://curl.haxx.se/)

4.5 LISTING BUNDLES ~
                                     *vundle-scripts-list* *BundleList*

To quickly pull list of installed bundles use >

    :BundleList


4.6 CLEANING UP ~
                                     *vundle-scripts-cleanup* *BundleClean*
run >

    :BundleClean

confirms removal of unused script-dirs from `.vim/bundle/`.

                                                            *BundleClean!*
>
    :BundleClean!

removes unused dirs with no questions.


                                     *vundle-interactive*
5. INTERACTIVE MODE ~

Vundle provides simple interactive mode to help you explore new scripts easily.
Interactive mode is available as result of any commands that display list of
bundles. For instance, running: >

    :BundleSearch! unite

triggers search for scripts matching 'unite' and yields a split window with
content: >

    "Keymap: i - Install bundle; c - Cleanup; r - Refine list; R - Reload list
    "Search results for: unite
    Bundle 'unite.vim'
    Bundle 'unite-yarm'
    Bundle 'unite-gem'
    Bundle 'unite-locate'
    Bundle 'unite-font'
    Bundle 'unite-colorscheme'

As the first line(starting with `"Keymap:`) shows, certain actions may be applied
to selected bundles .  Move cursor over line `Bundle 'unite.vim'` and press i 
key(install, see |vundle-keymappings| for more details). 
After unite.vim is installed - `:Unite file` command should be
available to prove 'unite.vim' availability.

NOTE: Interactive installation doesn't update your .vimrc configuration.

                                     *vundle-keymappings*
6. KEY MAPPINGS ~

KEY | DESCRIPTION
----|-------------------------- >
 i  |  run :BundleInstall with name taken from line cursor is positioned on
 I  |  same as i, but runs :BundleInstall! to update bundle
 D  |  delete selected bundle( be careful not to remove local modifications)
 c  |  run :BundleClean
 s  |  run :BundleSearch
 R  |  fetch fresh script list from server
.

                                     *vundle-options*
7. OPTIONS ~

>
  let g:vundle_default_git_proto = 'git'

makes Vundle use `git` instead default `https` when building absolute repo URIs


vim:tw=78:ts=8:ft=help:norl:
